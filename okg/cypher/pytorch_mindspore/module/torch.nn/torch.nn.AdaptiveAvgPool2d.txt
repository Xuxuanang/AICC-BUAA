// 1.1 torch.nn.AdaptiveAvgPool2d
// 二维自适应平均池化。
merge (: framework {name: 'PyTorch', version: '1.5.0'});
merge (: class {framework: 'PyTorch', name: 'torch'});
merge (: class {framework: 'PyTorch', name: 'nn'});
merge (: operator {framework: 'PyTorch', name: 'AdaptiveAvgPool2d', full_name: 'torch.nn.AdaptiveAvgPool2d'});
merge (: parameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d', parameter_order: 1, name: 'output_size', dtype: 2});
merge (: childParameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d', dtype_order: 1, parameter_order: 1, name: 'output_size', dtype : 'int'});
merge (: childParameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d', dtype_order: 2, parameter_order: 1, name: 'output_size', dtype : 'tuple'});


// 1.2 mindspore.ops.AdaptiveAvgPool2D
merge (: framework {name: 'MindSpore', version: '1.5.0'});
merge (: class {framework: 'MindSpore', name: 'mindspore'});
merge (: class {framework: 'MindSpore', name: 'ops'});
merge (: operator {framework: 'MindSpore', name: 'AdaptiveAvgPool2D', full_name: 'mindspore.ops.AdaptiveAvgPool2D'});
merge (: parameter {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D', parameter_order: 1, name: 'output_size'});
merge (: input {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D', input_order: 1, name: 'input_x'});



// 2. relationship within the framework
// 2.1 torch.nn.AdaptiveAvgPool2d
match
	(m1: framework {name: 'PyTorch'}),
	(m2: class {framework: 'PyTorch', name: 'torch'}),
	(m3: class {framework: 'PyTorch', name: 'nn'}),
	(m4: operator {full_name: 'torch.nn.AdaptiveAvgPool2d'})
merge (m1) -[: classOfFramework {name: m2.name}]-> (m2)
merge (m2) -[: subClassOfClass {name: m3.name}]-> (m3)
merge (m3) -[: operatorOfClass {name: m4.name}]-> (m4);

match
	(m21: operator {full_name: 'torch.nn.AdaptiveAvgPool2d'}),
	(m22: parameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d'})
merge (m21) -[: parameterOfOperator {parameter_order: m22.parameter_order, name: m22.name}] -> (m22);

match
	(m21: parameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d'}),
	(m22: childParameter {framework: 'PyTorch', operator: 'torch.nn.AdaptiveAvgPool2d'})
where m21.name = m22.name
merge (m21) -[: oneOf {dtype_order: m22.dtype_order, dtype: m22.dtype}] -> (m22);


// 2.2 mindspore.ops.AdaptiveAvgPool2D
match
	(m1: framework {name: 'MindSpore'}),
	(m2: class {framework: 'MindSpore', name: 'mindspore'}),
	(m3: class {framework: 'MindSpore', name: 'ops'}),
	(m4: operator {full_name: 'mindspore.ops.AdaptiveAvgPool2D'})
merge (m1) -[: classOfFramework {name: m2.name}]-> (m2)
merge (m2) -[: subClassOfClass {name: m3.name}]-> (m3)
merge (m3) -[: operatorOfClass {name: m4.name}]-> (m4);

match
	(m21: operator {full_name: 'mindspore.ops.AdaptiveAvgPool2D'}),
	(m22: parameter {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D'})
merge (m21) -[: parameterOfOperator {parameter_order: m22.parameter_order, name: m22.name}] -> (m22);

match
	(m21: parameter {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D'}),
	(m22: childParameter {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D'})
where m21.name = m22.name
merge (m21) -[: oneOf {dtype_order: m22.dtype_order, dtype: m22.dtype}] -> (m22);

match
	(m21: operator {full_name: 'mindspore.ops.AdaptiveAvgPool2D'}),
	(m22: input {framework: 'MindSpore', operator: 'mindspore.ops.AdaptiveAvgPool2D'})
merge (m21) -[: inputOfOperator {input_order: m22.input_order, name: m22.name}] -> (m22);



// 3. relationship between frameworks
match
	(m31: operator {full_name: 'torch.nn.AdaptiveAvgPool2d'}),
	(m32: operator {full_name: 'mindspore.ops.AdaptiveAvgPool2D'})
merge (m31) -[: equivalentOperator {framework_name: 'MindSpore'}]-> (m32)
merge (m32) -[: equivalentOperator {framework_name: 'PyTorch'}]-> (m31);

match
	(m31: parameter {framework: 'PyTorch', operator: "torch.nn.AdaptiveAvgPool2d", parameter_order: 1}),
	(m32: parameter {framework: 'MindSpore', operator: "mindspore.ops.AdaptiveAvgPool2D", parameter_order: 1})
merge (m31) -[: equivalentParameter {framework_name: 'MindSpore'}]-> (m32)
merge (m32) -[: equivalentParameter {framework_name: 'PyTorch'}]-> (m31);