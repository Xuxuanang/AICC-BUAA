// torchvision.transforms.ToTensor
merge (: framework {name: 'PyTorch', version: '1.5.0'});
merge (: class {framework: 'PyTorch', name: 'torchvision'});
merge (: class {framework: 'PyTorch', name: 'transforms'});
merge (: operator {framework: 'PyTorch', name: 'ToTensor', full_name: 'torchvision.transforms.ToTensor'});


// mindspore.dataset.vision.ToTensor
merge (: framework {name: 'MindSpore', version: '1.5.0'});
merge (: class {framework: 'MindSpore', name: 'mindspore'});
merge (: class {framework: 'MindSpore', name: 'dataset'});
merge (: class {framework: 'MindSpore', name: 'vision'});
merge (: operator {framework: 'MindSpore', name: 'ToTensor', full_name: 'mindspore.dataset.vision.ToTensor'});


// relationship within the framework
match
	(m1: framework {name: 'PyTorch'}),
	(m2: class {framework: 'PyTorch', name: 'torchvision'}),
	(m3: class {framework: 'PyTorch', name: 'transforms'}),
	(m4: operator {full_name: 'torchvision.transforms.ToTensor'}),
	(n1: framework {name: 'MindSpore'}),
	(n2: class {framework: 'MindSpore', name: 'mindspore'}),
	(n3: class {framework: 'MindSpore', name: 'dataset'}),
	(n4: class {framework: 'MindSpore', name: 'vision'}),
	(n5: operator {full_name: 'mindspore.dataset.vision.ToTensor'})
merge (m1) -[: classOfFramework {name: m2.name}]-> (m2)
merge (m2) -[: subClassOfClass {name: m3.name}]-> (m3)
merge (m3) -[: operatorOfClass {name: m4.name}]-> (m4)
merge (n1) -[: classOfFramework {name: n2.name}]-> (n2)
merge (n2) -[: subClassOfClass {name: n3.name}]-> (n3)
merge (n3) -[: subClassOfClass {name: n3.name}]-> (n4)
merge (n4) -[: operatorOfClass {name: n4.name}]-> (n5);


// relationship between frameworks
match
	(m3: operator {full_name: 'torchvision.transforms.ToTensor'}),
	(n3: operator {full_name: 'mindspore.dataset.vision.ToTensor'})
merge (m3) -[: equivalentOperator {framework_name: 'MindSpore'}]-> (n3)
merge (n3) -[: equivalentOperator {framework_name: 'PyTorch'}]-> (m3);