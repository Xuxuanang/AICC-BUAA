// 1.1 torchvision.transforms.ToTensor
// 将输入PIL图像或numpy.ndarray图像转换为指定类型的numpy.ndarray图像，图像的像素值范围将从[0, 255]放缩为[0.0, 1.0]，shape将从(H, W, C)调整为(C, H, W)。
merge (: framework {name: 'PyTorch', version: '1.5.0'});
merge (: class {framework: 'PyTorch', name: 'torchvision'});
merge (: class {framework: 'PyTorch', name: 'transforms'});
merge (: operator {framework: 'PyTorch', name: 'ToTensor', full_name: 'torchvision.transforms.ToTensor'});


// 1.2 mindspore.dataset.vision.ToTensor
merge (: framework {name: 'MindSpore', version: '1.5.0'});
merge (: class {framework: 'MindSpore', name: 'mindspore'});
merge (: class {framework: 'MindSpore', name: 'dataset'});
merge (: class {framework: 'MindSpore', name: 'vision'});
merge (: operator {framework: 'MindSpore', name: 'ToTensor', full_name: 'mindspore.dataset.vision.ToTensor'});



// relationship within the framework
// 2.1 torchvision.transforms.ToTensor
match
	(m1: framework {name: 'PyTorch'}),
	(m2: class {framework: 'PyTorch', name: 'torchvision'}),
	(m3: class {framework: 'PyTorch', name: 'transforms'}),
	(m4: operator {full_name: 'torchvision.transforms.ToTensor'})
merge (m1) -[: classOfFramework {name: m2.name}]-> (m2)
merge (m2) -[: subClassOfClass {name: m3.name}]-> (m3)
merge (m3) -[: operatorOfClass {name: m4.name}]-> (m4);

match
	(m21: operator {full_name: 'torchvision.transforms.ToTensor'}),
	(m22: parameter {framework: 'PyTorch', operator: 'ToTensor'})
merge (m21) -[: parameterOfOperator {parameter_order: m22.parameter_order, name: m22.name}] -> (m22);

match
	(m21: parameter {framework: 'PyTorch', operator: 'ToTensor'}),
	(m22: childParameter {framework: 'PyTorch', operator: 'ToTensor'})
where m21.name = m22.name
merge (m21) -[: oneOf {dtype_order: m22.dtype_order, dtype: m22.dtype}] -> (m22);


// 2.2 mindspore.dataset.vision.ToTensor
match
	(m1: framework {name: 'MindSpore'}),
	(m2: class {framework: 'MindSpore', name: 'mindspore'}),
	(m3: class {framework: 'MindSpore', name: 'dataset'}),
	(m4: class {framework: 'MindSpore', name: 'vision'}),
	(m5: operator {full_name: 'mindspore.dataset.vision.ToTensor'})
merge (m1) -[: classOfFramework {name: m2.name}]-> (m2)
merge (m2) -[: subClassOfClass {name: m3.name}]-> (m3)
merge (m3) -[: subClassOfClass {name: m4.name}]-> (m4)
merge (m4) -[: operatorOfClass {name: m5.name}]-> (m5);

match
	(m21: operator {full_name: 'mindspore.dataset.vision.ToTensor'}),
	(m22: parameter {framework: 'MindSpore', operator: 'ToTensor'})
merge (m21) -[: parameterOfOperator {parameter_order: m22.parameter_order, name: m22.name}] -> (m22);

match
	(m21: parameter {framework: 'MindSpore', operator: 'ToTensor'}),
	(m22: childParameter {framework: 'MindSpore', operator: 'ToTensor'})
where m21.name = m22.name
merge (m21) -[: oneOf {dtype_order: m22.dtype_order, dtype: m22.dtype}] -> (m22);


// relationship between frameworks
match
	(m3: operator {full_name: 'torchvision.transforms.ToTensor'}),
	(n3: operator {full_name: 'mindspore.dataset.vision.ToTensor'})
merge (m3) -[: equivalentOperator {framework_name: 'MindSpore'}]-> (n3)
merge (n3) -[: equivalentOperator {framework_name: 'PyTorch'}]-> (m3);